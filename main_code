import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import networkx as nx
import cvxpy as cv

feeder = pd.read_csv('FEEDER34.csv')
G = nx.DiGraph()
G.add_node(0,name='slack',d=0,s=0,p=0,pri=0)

for k in range(len(feeder)):
  zkm = feeder['Rpu'][k]+1j*feeder['Xpu'][k]
  dk = feeder['Ppu'][k] + 1j*feeder['Qpu'][k]
  smax=feeder['SGmax']
  pmax=feeder['PGmax']
  priority=feeder['Priority']
  G.add_node(feeder['To'][k],name=feeder['To'][k],d=dk,s=smax[k],p=pmax[k],pri=priority[k])
  G.add_edge(feeder['From'][k],feeder['To'][k],y=1/zkm,thlim=1)


#nx.draw(G,with_labels=True,pos=nx.spectral_layout(G))

A=nx.incidence_matrix(G,oriented=True)
Yp=np.diag([G.edges[k]['y'] for k in G.edges])
Ybus=A@Yp@A.T

n=G.number_of_nodes()
YN0=Ybus[1:n,0]
YNN=Ybus[1:n,1:n]
ZNN=np.linalg.inv(YNN)
d=np.array([G.nodes[k]['d'] for k in G.nodes])
smax=np.array([G.nodes[k]['s'] for k in G.nodes])
pmax=np.array([G.nodes[k]['p'] for k in G.nodes])
prior=np.array([G.nodes[k]['pri'] for k in G.nodes])


carga=0
dvariable=cv.Variable(n)

h=cv.Variable(n)
s=cv.Variable(n,complex=True)
W=cv.Variable((n,n),complex=True)
M=Ybus@W
res=[]

for k in range(n):
    carga=carga+dvariable[k]*d.real[k]
    res+=[dvariable[k]*d.real[k]<=d[k].real]
    res +=[d.real[k]*dvariable[k]>=d[k].real*prior[k]]
    res +=[cv.conj(s[k]-dvariable[k]*d[k])==M[k,k]]
    # res +=[cv.conj(s[k]-dvariable[k]*d.real[k])==M[k,k]]
    res +=[cv.abs(s[k])<=smax[k]]
    res +=[cv.real(s[k])<=pmax[k]]
    res +=[h[k]>=0.9025]
    res +=[h[k]<=1.1025]
    res +=[W[k][k]==h[k]]
    res +=[dvariable[k]<=1,dvariable[k]>=0]  
    for m in range (n):
        res +=[W[m,k]==cv.conj(W[k,m])]
        res +=[cv.SOC(h[k]+h[m],cv.vstack([2*W[k,m],h[k]-h[m]]))]
for (k,m) in G.edges:
    ylin=np.abs(G.edges[(k,m)]['y'])
    slin=G.edges[(k,m)]['thlim']
    res+=[cv.abs(h[k]-W[k,m])<=slin/ylin]
    res+=[cv.abs(h[m]-W[m,k])<=slin/ylin]

obj=cv.Maximize(carga)
OPFSOC=cv.Problem(obj,res)
OPFSOC.solve()
        
import pandas as pd 
results=pd.DataFrame()
results['name']=[G.nodes[k]['name'] for k in G.nodes]
results['vpu']=np.sqrt(h.value)
results['pnode']=np.round(s.value.real,4)
results['qnode']=np.round(s.value.imag,4)
results['Demand']=np.round(d.real,4)
results['Demand attend']=np.round(dvariable.value*d.real,4)
results['Priority']=np.round(prior,4)
results.head(n)
print(results)
print(sum(dvariable.value*d.real)/sum(d.real))


plt.figure()
plt.plot(np.sqrt(h.value))
plt.grid()
plt.xlabel('Nodes')
plt.ylabel('Voltages')
plt.show()
